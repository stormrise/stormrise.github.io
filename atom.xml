<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://stormrise.github.io</id>
    <title>嗨，这里是stormrise！</title>
    <updated>2020-05-20T15:47:09.289Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://stormrise.github.io"/>
    <link rel="self" href="https://stormrise.github.io/atom.xml"/>
    <subtitle>随便写点东西的地方</subtitle>
    <logo>https://stormrise.github.io/images/avatar.png</logo>
    <icon>https://stormrise.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 嗨，这里是stormrise！</rights>
    <entry>
        <title type="html"><![CDATA[IKSegment 复用，避免new多个对象导致性能低下]]></title>
        <id>https://stormrise.github.io/post/iksegment-fu-yong/</id>
        <link href="https://stormrise.github.io/post/iksegment-fu-yong/">
        </link>
        <updated>2020-05-20T14:06:14.000Z</updated>
        <summary type="html"><![CDATA[<p>大名顶顶的中文分词器 https://code.google.com/archive/p/ik-analyzer/ ，今天这里我们主要不是用在elastic search上，而是用于基础的分词，</p>
<blockquote>
<p><strong>IKSegmenter</strong> : 这是 IK 分词器的核心类。它是独立于 Lucene 的 Java 分词器实现。当您需要 在 Lucene 以外的环境中单独使用 IK 中文分词 组件时，IKSegmenter 正是您要找的。</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2020/05/20/1iMVbXcdUGOHEAg.png" alt="WechatIMG10924.png" loading="lazy"></figure>
<p>主要是我今天写的代码里，JProfiler 里排名第一的卡CPU就是它，我生成两百万数据的话，足足卡了我10分钟！！</p>
]]></summary>
        <content type="html"><![CDATA[<p>大名顶顶的中文分词器 https://code.google.com/archive/p/ik-analyzer/ ，今天这里我们主要不是用在elastic search上，而是用于基础的分词，</p>
<blockquote>
<p><strong>IKSegmenter</strong> : 这是 IK 分词器的核心类。它是独立于 Lucene 的 Java 分词器实现。当您需要 在 Lucene 以外的环境中单独使用 IK 中文分词 组件时，IKSegmenter 正是您要找的。</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2020/05/20/1iMVbXcdUGOHEAg.png" alt="WechatIMG10924.png" loading="lazy"></figure>
<p>主要是我今天写的代码里，JProfiler 里排名第一的卡CPU就是它，我生成两百万数据的话，足足卡了我10分钟！！</p>
<!-- more -->
<p>原因在于，我参考标准写法每次都新生成一个IKSegmenter对象，<br>
下面是两个构造函数：</p>
<pre><code class="language-java">/**
    * IK主分词器构造函数
    * 默认最细粒度切分
    * @param input
    */
public IKSegmentation(Reader input){
    this(input , false);
}

/**
    * IK主分词器构造函数
    * @param input
    * @param isMaxWordLength 当为true时，分词器进行最大词长切分
    */
public IKSegmentation(Reader input , boolean isMaxWordLength){
    this.input = input ;
    segmentBuff = new char[BUFF_SIZE];
    context = new Context(segmentBuff , isMaxWordLength);
    segmenters = Configuration.loadSegmenter();
}

</code></pre>
<p>我们可以看到每个构造函数都必须传入input进去，<br>
我就简单的写了</p>
<pre><code class="language-java">String sentence = &quot;这是一句话&quot;;
IKSegmentation iKSegmentation = new IKSegmentation(new StringReader(sentence), true);
</code></pre>
<p>然后包装成一个方法，每次传入一句话进去，这就导致了开篇的图中它吃掉了最多的CPU时间，</p>
<p>网上搜寻了很久无果，我想着我要把这个东西挪出去，不能每次都生成，最好复用一下，</p>
<p>一开始想的是我换一个Reader比如说什么InputstreamReader，但是发现并不可以，它都input是在构造的时候指定了就赋值好了，那么，仔细研究一下这个类，发现input还有一次被重新赋值的机会，就是reset函数</p>
<pre><code class="language-java">/**
    * 重置分词器到初始状态
    * @param input
    */
public synchronized void reset(Reader input) {
    this.input = input;
    context.resetContext();
    for(ISegmenter segmenter : segmenters){
        segmenter.reset();
    }
}
</code></pre>
<p>可以看到源码里面调用reset的时候是可以新输入一个reader的，这就解决了大问题！</p>
<p>我们把IKSegmentation定义在外面，注意这里有个小技巧（传入一个空字符串&quot;&quot;）初始化，然后调用函数时，重新生成一个StringReader并reset，这样我们就把排名第一的生成多个对象的问题给解决了！</p>
<pre><code class="language-java">IKSegmentation iKSegmentation = new IKSegmentation(new StringReader(&quot;&quot;), true);

public List&lt;String&gt; getIkWords(String sentence){
    iKSegmentation.reset(new StringReader(sentence));
    //.......
}
</code></pre>
<p>什么，你要问排名第二的next咋办，这个源码里只有next方法能用，还能咋办，哈哈哈</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[搭建我的世界私服-2020]]></title>
        <id>https://stormrise.github.io/post/wo-de-shi-jie/</id>
        <link href="https://stormrise.github.io/post/wo-de-shi-jie/">
        </link>
        <updated>2020-04-28T15:48:42.000Z</updated>
        <summary type="html"><![CDATA[<p>最近想和好友玩我的世界，想着之前玩过一些大佬的私服，准备自己来搭一个，<strong>官方版纯净生存服务器</strong></p>
<p>如何快速的搭建（几小时内），一键式傻瓜操作</p>
<h1 id="准备">准备</h1>
<p>首先我买了一个阿里云学生机（为了一个公网IP，用私钥或者密码连接进去<br>
考虑到方便，我选择了用docker来搭</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近想和好友玩我的世界，想着之前玩过一些大佬的私服，准备自己来搭一个，<strong>官方版纯净生存服务器</strong></p>
<p>如何快速的搭建（几小时内），一键式傻瓜操作</p>
<h1 id="准备">准备</h1>
<p>首先我买了一个阿里云学生机（为了一个公网IP，用私钥或者密码连接进去<br>
考虑到方便，我选择了用docker来搭</p>
<!-- more -->
<h3 id="安装docker">安装docker</h3>
<p><a href="https://yeasy.gitbooks.io/docker_practice/install/">一个比较专业的docker教程</a> ，从这里开始，装上之后记得去把<a href="https://yeasy.gitbooks.io/docker_practice/install/mirror.html">源设置</a>成阿里云的源（因为已经买了服务器了，就有账号会获得一个镜像地址。）<br>
当然这里需要注意，提前把docker的<a href="https://yeasy.gitbooks.io/docker_practice/network/dns.html">DNS设置</a>成1.1.1.1 最好，路径： <code>/etc/docker/daemon.json</code> (记得是在打括号里面添加，自己查一下json是怎么写的)，不然下一步就会无法解析mojang官网。</p>
<p>接下来装一个 docker的管理界面，方便查看状态，以及不用ssh的情况下在网页端重启。<br>
这里选择了我一直用的 <a href="https://www.portainer.io/installation/">portainer</a> ,</p>
<pre><code class="language-bash">docker volume create portainer_data
docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer
</code></pre>
<p>开启9000端口（记得在服务器安全组里添加端口访问权限），你就可以看到这个界面了，</p>
<h3 id="安装我的世界">安装我的世界</h3>
<p>下一步装我的世界，我选用了 https://github.com/itzg/docker-minecraft-server ，</p>
<pre><code class="language-bash">#注意这里是root用户，其他用户请自行pwd查看路径
mkdir data
docker run -d -it -p 25565:25565 -e EULA=TRUE -v /root/data:/data --name mc itzg/minecraft-server
</code></pre>
<p>如果这一步下载server包失败的话，你需要一个“可用”的网络自行去mojang官网下载（自己谷歌），并且重命名为对应的版本号: minecraft_server.1.15.2.jar ，然后scp到服务器的/data目录下去</p>
<p>记得打开25565这个端口号</p>
<p>在本地登陆我的世界，多人游戏，输入IP地址，就可以连上去了，<br>
第一次连接之后，需要给自己开管理员权限，在portainer里面点attach到mc这个容器，输入op #你的名字 即可授权成功，后续的操作可以直接在游戏里/op了或者/whitelist了</p>
<p>改<a href="https://minecraft-zh.gamepedia.com/Server.properties">server.properties</a>这种在wiki里面去搜吧，主要是把online-mode设置成false就可以让盗版玩家上线了（对于那种还没买的小伙伴。</p>
<p>这里提一句，请<strong>支持正版国际服</strong>，mojang官网购买，支持支付宝，165元人民币说实话不是很贵。</p>
<p>好了，可以要请好友上线一起玩了！！！总计花费时间（包括买阿里云到连接进去），从晚上9点到12点，非常的快速。其实不用docker安装也是一样的，但是docker后续有其他的作用，比如说nginx搭网站啥的。</p>
<p>PS：我准备下一个写写怎么玩服务器，物尽其用，比如说VSCode的remote server啦，frp内网穿透啦，nginx搭网站啦，Wordpress写博客啦</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于为啥不用hexo博客了]]></title>
        <id>https://stormrise.github.io/post/guan-yu-wei-sha-bu-yong-hexo-bo-ke-liao/</id>
        <link href="https://stormrise.github.io/post/guan-yu-wei-sha-bu-yong-hexo-bo-ke-liao/">
        </link>
        <updated>2020-04-11T14:37:18.000Z</updated>
        <summary type="html"><![CDATA[<p>好看确实是好看，但是失去了写文字的初衷，由于没有服务器，同步文章会很麻烦</p>
<p>当然这里我推荐有要用hexo的 https://easyhexo.com/</p>
<p>Gridea:  https://gridea.dev/docs/</p>
<p>本来一度准备删库，直接用GitHub静态页面，谁知发现了这个，觉得还不错，同步很方便，暂时就这样吧</p>
<p>接下来准备写点看书心得，以及预谋了很久的一篇吐槽文</p>
]]></summary>
        <content type="html"><![CDATA[<p>好看确实是好看，但是失去了写文字的初衷，由于没有服务器，同步文章会很麻烦</p>
<p>当然这里我推荐有要用hexo的 https://easyhexo.com/</p>
<p>Gridea:  https://gridea.dev/docs/</p>
<p>本来一度准备删库，直接用GitHub静态页面，谁知发现了这个，觉得还不错，同步很方便，暂时就这样吧</p>
<p>接下来准备写点看书心得，以及预谋了很久的一篇吐槽文</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://stormrise.github.io/post/hello-gridea/</id>
        <link href="https://stormrise.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>